import com.diffplug.gradle.spotless.JavaExtension

plugins {
	id 'java-library'
	id 'me.champeau.mrjar' version "0.1.1"
	id 'jacoco'
	id 'me.champeau.jmh' version '0.7.2'
	id 'org.sonarqube' version '5.1.0.4882'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'maven-publish'
	id 'signing'
	id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
	id 'com.palantir.revapi' version '1.8.0'
	id 'net.ltgt.errorprone' version '4.1.0'
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.11.2'
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.11.2'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.11.2'
	testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.26.3'
	testImplementation group: 'org.hipparchus', name: 'hipparchus-stat', version: '3.1'
	testImplementation group: 'org.hipparchus', name: 'hipparchus-optim', version: '3.1'
	testImplementation group: 'com.google.guava', name: 'guava', version: '33.3.1-jre'
	testImplementation group: 'commons-codec', name: 'commons-codec', version: '1.17.1'
	testImplementation group: 'net.openhft', name: 'zero-allocation-hashing', version: '0.26ea0'
	testImplementation group: 'com.appmattus.crypto', name: 'cryptohash', version: '1.0.2'
	testImplementation group: 'org.greenrobot', name: 'essentials', version: '3.1.0'
	testImplementation group: 'com.sangupta', name: 'murmur', version: '1.0.0'
	errorprone('com.google.errorprone:error_prone_core:2.31.0')
}

multiRelease {
	targetVersions 11, 21
}

static def readJavaLicense(licenseName) {
	File licenseFile = new File('licenses/' + licenseName + '.txt')
	def line
	def s = '/*\n'
	licenseFile.withReader { reader ->
		while ((line = reader.readLine()) != null) {
			s += ' *'
			if(!line.isEmpty()) {
				s += ' '
				s += line
			}
			s += '\n'
		}
	}
	s += ' */'
	return s
}

static def readPythonLicense(licenseName) {
	File licenseFile = new File('licenses/' + licenseName + '.txt')
	def line
	def s = '#\n'
	licenseFile.withReader { reader ->
		while ((line = reader.readLine()) != null) {
			s += '#'
			if(!line.isEmpty()) {
				s += ' '
				s += line
			}
			s += '\n'
		}
	}
	s += '#'
	return s
}

java {
	withJavadocJar()
	withSourcesJar()
}

group = 'com.dynatrace.hash4j'
version = '0.18.0'


spotless {
	def googleJavaFormatVersion = '1.23.0'
	def eclipseCdtVersion = '11.3'
	def blackVersion = '24.4.2'
	def greclipseVersion = '4.29'

	ratchetFrom 'origin/main'
	apply plugin: 'groovy'
	groovyGradle {
		target '*.gradle' // default target of groovyGradle
		greclipse(greclipseVersion)
	}
	python {
		target 'python/**/*.py'
		black(blackVersion)
		licenseHeader readPythonLicense('APACHE_2_0_DYNATRACE'), '(import|from)'
	}
	cpp {
		target 'reference-implementations/*/*.cpp', 'reference-implementations/*/*.hpp', 'reference-implementations/*.cpp', 'reference-implementations/*.hpp'
		eclipseCdt(eclipseCdtVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE')
	}
	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat(googleJavaFormatVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE')
		targetExclude \
			'src/main/java/com/dynatrace/hash4j/consistent/ConsistentJumpBucketHasher.java',\
			'src/main/java/com/dynatrace/hash4j/file/Imohash1_0_2.java',\
			'src/main/java/com/dynatrace/hash4j/hashing/Komihash4_3.java',\
			'src/main/java/com/dynatrace/hash4j/hashing/Komihash5_0.java',\
			'src/main/java/com/dynatrace/hash4j/hashing/PolymurHash2_0.java',\
			'src/main/java/com/dynatrace/hash4j/hashing/AbstractKomihash.java',\
			'src/main/java/com/dynatrace/hash4j/hashing/FarmHashNa.java',\
			'src/main/java/com/dynatrace/hash4j/hashing/FarmHashUo.java',\
			'src/main/java/com/dynatrace/hash4j/random/SplitMix64V1.java',\
			'src/main/java/com/dynatrace/hash4j/random/RandomExponentialUtil.java',\
			'src/main/java/com/dynatrace/hash4j/hashing/XXH3_64.java'
	}
	format 'javaImohash', JavaExtension, {
		importOrder()
		removeUnusedImports()
		googleJavaFormat(googleJavaFormatVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE') + '\n\n' + readJavaLicense('MIT_IMOHASH')
		target 'src/main/java/com/dynatrace/hash4j/file/Imohash1_0_2.java'
	}
	format 'javaKomihash', JavaExtension, {
		importOrder()
		removeUnusedImports()
		googleJavaFormat(googleJavaFormatVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE') + '\n\n' + readJavaLicense('MIT_KOMIHASH')
		target 'src/main/java/com/dynatrace/hash4j/hashing/Komihash4_3.java', 'src/main/java/com/dynatrace/hash4j/hashing/Komihash5_0.java', 'src/main/java/com/dynatrace/hash4j/hashing/AbstractKomihash.java'
	}
	format 'javaFarmHash', JavaExtension, {
		importOrder()
		removeUnusedImports()
		googleJavaFormat(googleJavaFormatVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE') + '\n\n' + readJavaLicense('MIT_APACHE_2_0_FARMHASH')
		target 'src/main/java/com/dynatrace/hash4j/hashing/FarmHashNa.java','src/main/java/com/dynatrace/hash4j/hashing/FarmHashUo.java'
	}
	format 'javaPolymurHash', JavaExtension, {
		importOrder()
		removeUnusedImports()
		googleJavaFormat(googleJavaFormatVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE') + '\n\n' + readJavaLicense('ZLIB_POLYMURHASH')
		target 'src/main/java/com/dynatrace/hash4j/hashing/PolymurHash2_0.java'
	}
	format 'javaSplitMix64', JavaExtension, {
		importOrder()
		removeUnusedImports()
		googleJavaFormat(googleJavaFormatVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE') + '\n\n' + readJavaLicense('CREATIVE_COMMONS_SPLITMIX64')
		target 'src/main/java/com/dynatrace/hash4j/random/SplitMix64V1.java'
	}
	format 'javaExponential', JavaExtension, {
		importOrder()
		removeUnusedImports()
		googleJavaFormat(googleJavaFormatVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE') + '\n\n' + readJavaLicense('BOOST_EXPONENTIAL_RANDOM_GENERATION')
		target 'src/main/java/com/dynatrace/hash4j/random/RandomExponentialUtil.java'
	}
	format 'javaConsistentJumpHash', JavaExtension, {
		importOrder()
		removeUnusedImports()
		googleJavaFormat(googleJavaFormatVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE') + '\n\n' + readJavaLicense('APACHE_2_0_GUAVA')
		target 'src/main/java/com/dynatrace/hash4j/consistent/ConsistentJumpBucketHasher.java'
	}
	format 'javaXXH', JavaExtension, {
		importOrder()
		removeUnusedImports()
		googleJavaFormat(googleJavaFormatVersion)
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE') + '\n\n' + readJavaLicense('APACHE_2_0_XXH')
		target 'src/main/java/com/dynatrace/hash4j/hashing/XXH3_64.java'
	}
}

sonarqube {
	properties {
		property 'sonar.projectKey', 'dynatrace-oss_hash4j'
		property 'sonar.organization', 'dynatrace-oss'
		property 'sonar.host.url', 'https://sonarcloud.io'
	}
}


jmh {
	fork = 1
	timeUnit = 'us'
	failOnError = false
	timeOnIteration = '1s'
	warmupForks = 0
	warmupIterations = 5
	warmupBatchSize = 1
	warmup = '1s'
	iterations = 20
	resultFormat = 'JSON'
}

task evaluateBenchmarks(type:Exec) {
	group "evaluation"
	workingDir '.'
	commandLine 'python', 'python/benchmark_evaluation.py'
}

task evaluateEstimationErrors(type:Exec) {
	group "evaluation"
	workingDir '.'
	commandLine 'python', 'python/estimation_error_evaluation.py'
}

def sketches = ["UltraLogLog", "HyperLogLog"]
def pValues = [
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
	13,
	14,
	15,
	16
]
def evaluationTasks = []
for (sketch in sketches) {
	def sketchTasks = []
	for (p in pValues) {
		def sketchTaskName = "simulate" + sketch + "EstimationErrorsP" + String.format( "%02d", p )
		def outputFileName = "test-results/" + sketch.toLowerCase() + '-estimation-error-p' + String.format( "%02d", p )  + '.csv'
		task "${sketchTaskName}"(type: JavaExec) {
			outputs.files outputFileName
			group "evaluation"
			classpath = sourceSets.test.runtimeClasspath
			mainClass = 'com.dynatrace.hash4j.distinctcount.' + sketch + 'EstimationErrorSimulation'
			args = [p.toString(), outputFileName]
			jvmArgs = ['-Xmx16g']
		}
		sketchTasks.add(sketchTaskName)
	}
	def evaluationTaskName = "simulate" + sketch + "EstimationErrors"
	task "${evaluationTaskName}" {
		group "evaluation"
		dependsOn sketchTasks
	}
	evaluationTasks.add(evaluationTaskName)
}
task "simulateEstimationErrors" {
	group "evaluation"
	dependsOn evaluationTasks
}

tasks.register('checkStatusForBenchmarks') {
	outputs.upToDateWhen { false }
	doLast {
		def status_text = "git status --porcelain".execute().text
		if(status_text?.trim()) {
			throw new GradleException('There are uncommitted changes:\n' + status_text)
		}
	}
}

tasks.register('copyBenchmarkReport', Copy) {
	def proc = "git rev-parse HEAD".execute()
	def revision = proc.text.trim()
	from('build/results/jmh/') {
		include 'results.*'
		rename 'results', new Date().format('yyyy-MM-dd-HH-mm-ss') + ' ' + revision
	}
	into 'benchmark-results'
}

tasks.register('deleteBenchmarkReport', Delete) {
	delete 'build/results/jmh/results.json'
}

tasks.test.finalizedBy jacocoTestReport
tasks.jmh.finalizedBy copyBenchmarkReport
tasks.copyBenchmarkReport.finalizedBy deleteBenchmarkReport
check.dependsOn jacocoTestCoverageVerification
tasks.jmh.dependsOn checkStatusForBenchmarks
tasks.copyBenchmarkReport.dependsOn checkStatusForBenchmarks
tasks.simulateHyperLogLogEstimationErrors.finalizedBy evaluateEstimationErrors
tasks.simulateUltraLogLogEstimationErrors.finalizedBy evaluateEstimationErrors

sourceSets {
	jmh
	main
	test
}

javadoc {
	failOnError true
	title 'hash4j ' + project.version + ' API'
}

jacoco {
	toolVersion = '0.8.11'
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 1.0
				counter = 'LINE'
			}
			limit {
				minimum = 1.0
				counter = 'BRANCH'
			}
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			pom {
				name = 'com.dynatrace.hash4j:hash4j'
				description = 'hash4j: A Dynatrace hash library for Java'
				url = 'https://github.com/dynatrace-oss/hash4j'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'Dynatrace'
						name = 'Dynatrace LLC'
						email = 'opensource@dynatrace.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/dynatrace-oss/hash4j.git'
					developerConnection = 'scm:git:ssh://github.com/dynatrace-oss/hash4j.git'
					url = 'https://github.com/dynatrace-oss/hash4j'
				}
			}
		}
	}
}

signing {
	useInMemoryPgpKeys(System.getenv('GPG_PRIVATE_KEY'), System.getenv('GPG_PASSPHRASE'))
	sign publishing.publications.mavenJava
}

nexusPublishing {
	packageGroup = 'com.dynatrace'
	useStaging = true
	repositories {
		sonatype {
			nexusUrl = uri('https://oss.sonatype.org/service/local/')
			snapshotRepositoryUrl = uri('https://oss.sonatype.org/content/repositories/snapshots/')
			username = System.getenv('OSSRH_USERNAME')
			password = System.getenv('OSSRH_PASSWORD')
		}
	}
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
	maxHeapSize '8g'
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << "-Werror"
	options.errorprone.disableWarningsInGeneratedCode = false
	// options.errorprone.enabled = false
}

if (file("extra-configuration.gradle").exists()) {
	apply from: 'extra-configuration.gradle'
}
